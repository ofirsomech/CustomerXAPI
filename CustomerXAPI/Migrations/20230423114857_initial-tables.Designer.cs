// <auto-generated />
using IPI_server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerXAPI.Migrations
{
    [DbContext(typeof(CustomerXContext))]
    [Migration("20230423114857_initial-tables")]
    partial class initialtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CustomerXAPI.Models.Contract", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubscriberName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubscriptionNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Customer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressHouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Package", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ContractSubscriptionNumber")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<int>("Survivor")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContractID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Contract", b =>
                {
                    b.HasOne("CustomerXAPI.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Package", b =>
                {
                    b.HasOne("CustomerXAPI.Models.Contract", "Contract")
                        .WithMany("Packages")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Contract", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("CustomerXAPI.Models.Customer", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
